// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
	"github.com/schigh-ntwrk/ent-poc/internal/ent/clinic"
	"github.com/schigh-ntwrk/ent-poc/internal/ent/veterinarian"
)

// ClinicCreate is the builder for creating a Clinic entity.
type ClinicCreate struct {
	config
	mutation *ClinicMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (cc *ClinicCreate) SetCreatedAt(t time.Time) *ClinicCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (cc *ClinicCreate) SetNillableCreatedAt(t *time.Time) *ClinicCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the updated_at field.
func (cc *ClinicCreate) SetUpdatedAt(t time.Time) *ClinicCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (cc *ClinicCreate) SetNillableUpdatedAt(t *time.Time) *ClinicCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetRemovedAt sets the removed_at field.
func (cc *ClinicCreate) SetRemovedAt(t time.Time) *ClinicCreate {
	cc.mutation.SetRemovedAt(t)
	return cc
}

// SetNillableRemovedAt sets the removed_at field if the given value is not nil.
func (cc *ClinicCreate) SetNillableRemovedAt(t *time.Time) *ClinicCreate {
	if t != nil {
		cc.SetRemovedAt(*t)
	}
	return cc
}

// SetName sets the name field.
func (cc *ClinicCreate) SetName(s string) *ClinicCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetAddress sets the address field.
func (cc *ClinicCreate) SetAddress(s string) *ClinicCreate {
	cc.mutation.SetAddress(s)
	return cc
}

// SetPhone sets the phone field.
func (cc *ClinicCreate) SetPhone(s string) *ClinicCreate {
	cc.mutation.SetPhone(s)
	return cc
}

// SetWebURL sets the web_url field.
func (cc *ClinicCreate) SetWebURL(s string) *ClinicCreate {
	cc.mutation.SetWebURL(s)
	return cc
}

// SetID sets the id field.
func (cc *ClinicCreate) SetID(u uuid.UUID) *ClinicCreate {
	cc.mutation.SetID(u)
	return cc
}

// AddVeterinarianIDs adds the veterinarians edge to Veterinarian by ids.
func (cc *ClinicCreate) AddVeterinarianIDs(ids ...uuid.UUID) *ClinicCreate {
	cc.mutation.AddVeterinarianIDs(ids...)
	return cc
}

// AddVeterinarians adds the veterinarians edges to Veterinarian.
func (cc *ClinicCreate) AddVeterinarians(v ...*Veterinarian) *ClinicCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cc.AddVeterinarianIDs(ids...)
}

// Mutation returns the ClinicMutation object of the builder.
func (cc *ClinicCreate) Mutation() *ClinicMutation {
	return cc.mutation
}

// Save creates the Clinic in the database.
func (cc *ClinicCreate) Save(ctx context.Context) (*Clinic, error) {
	var (
		err  error
		node *Clinic
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClinicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClinicCreate) SaveX(ctx context.Context) *Clinic {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (cc *ClinicCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := clinic.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := clinic.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := clinic.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ClinicCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := clinic.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := cc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New("ent: missing required field \"address\"")}
	}
	if v, ok := cc.mutation.Address(); ok {
		if err := clinic.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf("ent: validator failed for field \"address\": %w", err)}
		}
	}
	if _, ok := cc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New("ent: missing required field \"phone\"")}
	}
	if v, ok := cc.mutation.Phone(); ok {
		if err := clinic.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if _, ok := cc.mutation.WebURL(); !ok {
		return &ValidationError{Name: "web_url", err: errors.New("ent: missing required field \"web_url\"")}
	}
	if v, ok := cc.mutation.WebURL(); ok {
		if err := clinic.WebURLValidator(v); err != nil {
			return &ValidationError{Name: "web_url", err: fmt.Errorf("ent: validator failed for field \"web_url\": %w", err)}
		}
	}
	return nil
}

func (cc *ClinicCreate) sqlSave(ctx context.Context) (*Clinic, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (cc *ClinicCreate) createSpec() (*Clinic, *sqlgraph.CreateSpec) {
	var (
		_node = &Clinic{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: clinic.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: clinic.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: clinic.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: clinic.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.RemovedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: clinic.FieldRemovedAt,
		})
		_node.RemovedAt = &value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clinic.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clinic.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := cc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clinic.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := cc.mutation.WebURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clinic.FieldWebURL,
		})
		_node.WebURL = value
	}
	if nodes := cc.mutation.VeterinariansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clinic.VeterinariansTable,
			Columns: []string{clinic.VeterinariansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: veterinarian.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClinicCreateBulk is the builder for creating a bulk of Clinic entities.
type ClinicCreateBulk struct {
	config
	builders []*ClinicCreate
}

// Save creates the Clinic entities in the database.
func (ccb *ClinicCreateBulk) Save(ctx context.Context) ([]*Clinic, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Clinic, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClinicMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ccb *ClinicCreateBulk) SaveX(ctx context.Context) []*Clinic {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
