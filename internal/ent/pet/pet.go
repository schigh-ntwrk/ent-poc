// Code generated by entc, DO NOT EDIT.

package pet

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the pet type in the database.
	Label = "pet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldRemovedAt holds the string denoting the removed_at field in the database.
	FieldRemovedAt = "removed_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSpecies holds the string denoting the species field in the database.
	FieldSpecies = "species"
	// FieldBirthDate holds the string denoting the birth_date field in the database.
	FieldBirthDate = "birth_date"
	// FieldDetails holds the string denoting the details field in the database.
	FieldDetails = "details"

	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeAppointments holds the string denoting the appointments edge name in mutations.
	EdgeAppointments = "appointments"

	// Table holds the table name of the pet in the database.
	Table = "pets"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "pets"
	// OwnerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	OwnerInverseTable = "customers"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "customer_id"
	// AppointmentsTable is the table the holds the appointments relation/edge.
	AppointmentsTable = "appointments"
	// AppointmentsInverseTable is the table name for the Appointment entity.
	// It exists in this package in order to avoid circular dependency with the "appointment" package.
	AppointmentsInverseTable = "appointments"
	// AppointmentsColumn is the table column denoting the appointments relation/edge.
	AppointmentsColumn = "pet_id"
)

// Columns holds all SQL columns for pet fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldRemovedAt,
	FieldName,
	FieldSpecies,
	FieldBirthDate,
	FieldDetails,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Pet type.
var ForeignKeys = []string{
	"customer_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DetailsValidator is a validator for the "details" field. It is called by the builders before save.
	DetailsValidator func(string) error
	// DefaultID holds the default value on creation for the id field.
	DefaultID func() uuid.UUID
)

// Species defines the type for the species enum field.
type Species string

// Species values.
const (
	SpeciesDog    Species = "DOG"
	SpeciesCat    Species = "CAT"
	SpeciesBird   Species = "BIRD"
	SpeciesRodent Species = "RODENT"
	SpeciesLizard Species = "LIZARD"
	SpeciesFish   Species = "FISH"
)

func (s Species) String() string {
	return string(s)
}

// SpeciesValidator is a validator for the "species" field enum values. It is called by the builders before save.
func SpeciesValidator(s Species) error {
	switch s {
	case SpeciesDog, SpeciesCat, SpeciesBird, SpeciesRodent, SpeciesLizard, SpeciesFish:
		return nil
	default:
		return fmt.Errorf("pet: invalid enum value for species field: %q", s)
	}
}
