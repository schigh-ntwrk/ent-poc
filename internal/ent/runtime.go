// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/schigh-ntwrk/ent-poc/internal/ent/appointment"
	"github.com/schigh-ntwrk/ent-poc/internal/ent/clinic"
	"github.com/schigh-ntwrk/ent-poc/internal/ent/customer"
	"github.com/schigh-ntwrk/ent-poc/internal/ent/pet"
	"github.com/schigh-ntwrk/ent-poc/internal/ent/schema"
	"github.com/schigh-ntwrk/ent-poc/internal/ent/user"
	"github.com/schigh-ntwrk/ent-poc/internal/ent/veterinarian"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	appointmentMixin := schema.Appointment{}.Mixin()
	appointmentMixinFields0 := appointmentMixin[0].Fields()
	appointmentMixinFields1 := appointmentMixin[1].Fields()
	appointmentFields := schema.Appointment{}.Fields()
	_ = appointmentFields
	// appointmentDescCreatedAt is the schema descriptor for created_at field.
	appointmentDescCreatedAt := appointmentMixinFields1[0].Descriptor()
	// appointment.DefaultCreatedAt holds the default value on creation for the created_at field.
	appointment.DefaultCreatedAt = appointmentDescCreatedAt.Default.(func() time.Time)
	// appointmentDescUpdatedAt is the schema descriptor for updated_at field.
	appointmentDescUpdatedAt := appointmentMixinFields1[1].Descriptor()
	// appointment.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	appointment.DefaultUpdatedAt = appointmentDescUpdatedAt.Default.(func() time.Time)
	// appointment.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	appointment.UpdateDefaultUpdatedAt = appointmentDescUpdatedAt.UpdateDefault.(func() time.Time)
	// appointmentDescCharge is the schema descriptor for charge field.
	appointmentDescCharge := appointmentFields[3].Descriptor()
	// appointment.DefaultCharge holds the default value on creation for the charge field.
	appointment.DefaultCharge = appointmentDescCharge.Default.(float64)
	// appointmentDescPaid is the schema descriptor for paid field.
	appointmentDescPaid := appointmentFields[4].Descriptor()
	// appointment.DefaultPaid holds the default value on creation for the paid field.
	appointment.DefaultPaid = appointmentDescPaid.Default.(bool)
	// appointmentDescID is the schema descriptor for id field.
	appointmentDescID := appointmentMixinFields0[0].Descriptor()
	// appointment.DefaultID holds the default value on creation for the id field.
	appointment.DefaultID = appointmentDescID.Default.(func() uuid.UUID)
	clinicMixin := schema.Clinic{}.Mixin()
	clinicMixinFields0 := clinicMixin[0].Fields()
	clinicMixinFields1 := clinicMixin[1].Fields()
	clinicFields := schema.Clinic{}.Fields()
	_ = clinicFields
	// clinicDescCreatedAt is the schema descriptor for created_at field.
	clinicDescCreatedAt := clinicMixinFields1[0].Descriptor()
	// clinic.DefaultCreatedAt holds the default value on creation for the created_at field.
	clinic.DefaultCreatedAt = clinicDescCreatedAt.Default.(func() time.Time)
	// clinicDescUpdatedAt is the schema descriptor for updated_at field.
	clinicDescUpdatedAt := clinicMixinFields1[1].Descriptor()
	// clinic.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	clinic.DefaultUpdatedAt = clinicDescUpdatedAt.Default.(func() time.Time)
	// clinic.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	clinic.UpdateDefaultUpdatedAt = clinicDescUpdatedAt.UpdateDefault.(func() time.Time)
	// clinicDescName is the schema descriptor for name field.
	clinicDescName := clinicFields[0].Descriptor()
	// clinic.NameValidator is a validator for the "name" field. It is called by the builders before save.
	clinic.NameValidator = func() func(string) error {
		validators := clinicDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// clinicDescAddress is the schema descriptor for address field.
	clinicDescAddress := clinicFields[1].Descriptor()
	// clinic.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	clinic.AddressValidator = func() func(string) error {
		validators := clinicDescAddress.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(address string) error {
			for _, fn := range fns {
				if err := fn(address); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// clinicDescPhone is the schema descriptor for phone field.
	clinicDescPhone := clinicFields[2].Descriptor()
	// clinic.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	clinic.PhoneValidator = func() func(string) error {
		validators := clinicDescPhone.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone string) error {
			for _, fn := range fns {
				if err := fn(phone); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// clinicDescWebURL is the schema descriptor for web_url field.
	clinicDescWebURL := clinicFields[3].Descriptor()
	// clinic.WebURLValidator is a validator for the "web_url" field. It is called by the builders before save.
	clinic.WebURLValidator = clinicDescWebURL.Validators[0].(func(string) error)
	// clinicDescID is the schema descriptor for id field.
	clinicDescID := clinicMixinFields0[0].Descriptor()
	// clinic.DefaultID holds the default value on creation for the id field.
	clinic.DefaultID = clinicDescID.Default.(func() uuid.UUID)
	customerMixin := schema.Customer{}.Mixin()
	customerMixinFields0 := customerMixin[0].Fields()
	customerMixinFields1 := customerMixin[1].Fields()
	customerFields := schema.Customer{}.Fields()
	_ = customerFields
	// customerDescCreatedAt is the schema descriptor for created_at field.
	customerDescCreatedAt := customerMixinFields1[0].Descriptor()
	// customer.DefaultCreatedAt holds the default value on creation for the created_at field.
	customer.DefaultCreatedAt = customerDescCreatedAt.Default.(func() time.Time)
	// customerDescUpdatedAt is the schema descriptor for updated_at field.
	customerDescUpdatedAt := customerMixinFields1[1].Descriptor()
	// customer.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	customer.DefaultUpdatedAt = customerDescUpdatedAt.Default.(func() time.Time)
	// customer.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	customer.UpdateDefaultUpdatedAt = customerDescUpdatedAt.UpdateDefault.(func() time.Time)
	// customerDescAddress is the schema descriptor for address field.
	customerDescAddress := customerFields[0].Descriptor()
	// customer.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	customer.AddressValidator = func() func(string) error {
		validators := customerDescAddress.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(address string) error {
			for _, fn := range fns {
				if err := fn(address); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// customerDescPhone is the schema descriptor for phone field.
	customerDescPhone := customerFields[1].Descriptor()
	// customer.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	customer.PhoneValidator = func() func(string) error {
		validators := customerDescPhone.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone string) error {
			for _, fn := range fns {
				if err := fn(phone); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// customerDescID is the schema descriptor for id field.
	customerDescID := customerMixinFields0[0].Descriptor()
	// customer.DefaultID holds the default value on creation for the id field.
	customer.DefaultID = customerDescID.Default.(func() uuid.UUID)
	petMixin := schema.Pet{}.Mixin()
	petMixinFields0 := petMixin[0].Fields()
	petMixinFields1 := petMixin[1].Fields()
	petFields := schema.Pet{}.Fields()
	_ = petFields
	// petDescCreatedAt is the schema descriptor for created_at field.
	petDescCreatedAt := petMixinFields1[0].Descriptor()
	// pet.DefaultCreatedAt holds the default value on creation for the created_at field.
	pet.DefaultCreatedAt = petDescCreatedAt.Default.(func() time.Time)
	// petDescUpdatedAt is the schema descriptor for updated_at field.
	petDescUpdatedAt := petMixinFields1[1].Descriptor()
	// pet.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	pet.DefaultUpdatedAt = petDescUpdatedAt.Default.(func() time.Time)
	// pet.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	pet.UpdateDefaultUpdatedAt = petDescUpdatedAt.UpdateDefault.(func() time.Time)
	// petDescName is the schema descriptor for name field.
	petDescName := petFields[0].Descriptor()
	// pet.NameValidator is a validator for the "name" field. It is called by the builders before save.
	pet.NameValidator = func() func(string) error {
		validators := petDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// petDescDetails is the schema descriptor for details field.
	petDescDetails := petFields[3].Descriptor()
	// pet.DetailsValidator is a validator for the "details" field. It is called by the builders before save.
	pet.DetailsValidator = petDescDetails.Validators[0].(func(string) error)
	// petDescID is the schema descriptor for id field.
	petDescID := petMixinFields0[0].Descriptor()
	// pet.DefaultID holds the default value on creation for the id field.
	pet.DefaultID = petDescID.Default.(func() uuid.UUID)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	userMixinFields1 := userMixin[1].Fields()
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields1[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields1[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[0].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescFirstName is the schema descriptor for first_name field.
	userDescFirstName := userFields[1].Descriptor()
	// user.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	user.FirstNameValidator = func() func(string) error {
		validators := userDescFirstName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(first_name string) error {
			for _, fn := range fns {
				if err := fn(first_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescLastName is the schema descriptor for last_name field.
	userDescLastName := userFields[2].Descriptor()
	// user.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	user.LastNameValidator = func() func(string) error {
		validators := userDescLastName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(last_name string) error {
			for _, fn := range fns {
				if err := fn(last_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
	veterinarianMixin := schema.Veterinarian{}.Mixin()
	veterinarianMixinFields0 := veterinarianMixin[0].Fields()
	veterinarianMixinFields1 := veterinarianMixin[1].Fields()
	veterinarianFields := schema.Veterinarian{}.Fields()
	_ = veterinarianFields
	// veterinarianDescCreatedAt is the schema descriptor for created_at field.
	veterinarianDescCreatedAt := veterinarianMixinFields1[0].Descriptor()
	// veterinarian.DefaultCreatedAt holds the default value on creation for the created_at field.
	veterinarian.DefaultCreatedAt = veterinarianDescCreatedAt.Default.(func() time.Time)
	// veterinarianDescUpdatedAt is the schema descriptor for updated_at field.
	veterinarianDescUpdatedAt := veterinarianMixinFields1[1].Descriptor()
	// veterinarian.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	veterinarian.DefaultUpdatedAt = veterinarianDescUpdatedAt.Default.(func() time.Time)
	// veterinarian.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	veterinarian.UpdateDefaultUpdatedAt = veterinarianDescUpdatedAt.UpdateDefault.(func() time.Time)
	// veterinarianDescPhone is the schema descriptor for phone field.
	veterinarianDescPhone := veterinarianFields[0].Descriptor()
	// veterinarian.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	veterinarian.PhoneValidator = func() func(string) error {
		validators := veterinarianDescPhone.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone string) error {
			for _, fn := range fns {
				if err := fn(phone); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// veterinarianDescID is the schema descriptor for id field.
	veterinarianDescID := veterinarianMixinFields0[0].Descriptor()
	// veterinarian.DefaultID holds the default value on creation for the id field.
	veterinarian.DefaultID = veterinarianDescID.Default.(func() uuid.UUID)
}
