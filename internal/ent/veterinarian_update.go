// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
	"github.com/schigh-ntwrk/entc-poc/internal/ent/appointment"
	"github.com/schigh-ntwrk/entc-poc/internal/ent/clinic"
	"github.com/schigh-ntwrk/entc-poc/internal/ent/predicate"
	"github.com/schigh-ntwrk/entc-poc/internal/ent/user"
	"github.com/schigh-ntwrk/entc-poc/internal/ent/veterinarian"
)

// VeterinarianUpdate is the builder for updating Veterinarian entities.
type VeterinarianUpdate struct {
	config
	hooks    []Hook
	mutation *VeterinarianMutation
}

// Where adds a new predicate for the builder.
func (vu *VeterinarianUpdate) Where(ps ...predicate.Veterinarian) *VeterinarianUpdate {
	vu.mutation.predicates = append(vu.mutation.predicates, ps...)
	return vu
}

// SetCreatedAt sets the created_at field.
func (vu *VeterinarianUpdate) SetCreatedAt(t time.Time) *VeterinarianUpdate {
	vu.mutation.SetCreatedAt(t)
	return vu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (vu *VeterinarianUpdate) SetNillableCreatedAt(t *time.Time) *VeterinarianUpdate {
	if t != nil {
		vu.SetCreatedAt(*t)
	}
	return vu
}

// SetUpdatedAt sets the updated_at field.
func (vu *VeterinarianUpdate) SetUpdatedAt(t time.Time) *VeterinarianUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetRemovedAt sets the removed_at field.
func (vu *VeterinarianUpdate) SetRemovedAt(t time.Time) *VeterinarianUpdate {
	vu.mutation.SetRemovedAt(t)
	return vu
}

// SetNillableRemovedAt sets the removed_at field if the given value is not nil.
func (vu *VeterinarianUpdate) SetNillableRemovedAt(t *time.Time) *VeterinarianUpdate {
	if t != nil {
		vu.SetRemovedAt(*t)
	}
	return vu
}

// ClearRemovedAt clears the value of removed_at.
func (vu *VeterinarianUpdate) ClearRemovedAt() *VeterinarianUpdate {
	vu.mutation.ClearRemovedAt()
	return vu
}

// SetPhone sets the phone field.
func (vu *VeterinarianUpdate) SetPhone(s string) *VeterinarianUpdate {
	vu.mutation.SetPhone(s)
	return vu
}

// SetUserID sets the user edge to User by id.
func (vu *VeterinarianUpdate) SetUserID(id uuid.UUID) *VeterinarianUpdate {
	vu.mutation.SetUserID(id)
	return vu
}

// SetUser sets the user edge to User.
func (vu *VeterinarianUpdate) SetUser(u *User) *VeterinarianUpdate {
	return vu.SetUserID(u.ID)
}

// SetClinicID sets the clinic edge to Clinic by id.
func (vu *VeterinarianUpdate) SetClinicID(id uuid.UUID) *VeterinarianUpdate {
	vu.mutation.SetClinicID(id)
	return vu
}

// SetClinic sets the clinic edge to Clinic.
func (vu *VeterinarianUpdate) SetClinic(c *Clinic) *VeterinarianUpdate {
	return vu.SetClinicID(c.ID)
}

// AddAppointmentIDs adds the appointments edge to Appointment by ids.
func (vu *VeterinarianUpdate) AddAppointmentIDs(ids ...uuid.UUID) *VeterinarianUpdate {
	vu.mutation.AddAppointmentIDs(ids...)
	return vu
}

// AddAppointments adds the appointments edges to Appointment.
func (vu *VeterinarianUpdate) AddAppointments(a ...*Appointment) *VeterinarianUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vu.AddAppointmentIDs(ids...)
}

// Mutation returns the VeterinarianMutation object of the builder.
func (vu *VeterinarianUpdate) Mutation() *VeterinarianMutation {
	return vu.mutation
}

// ClearUser clears the "user" edge to type User.
func (vu *VeterinarianUpdate) ClearUser() *VeterinarianUpdate {
	vu.mutation.ClearUser()
	return vu
}

// ClearClinic clears the "clinic" edge to type Clinic.
func (vu *VeterinarianUpdate) ClearClinic() *VeterinarianUpdate {
	vu.mutation.ClearClinic()
	return vu
}

// ClearAppointments clears all "appointments" edges to type Appointment.
func (vu *VeterinarianUpdate) ClearAppointments() *VeterinarianUpdate {
	vu.mutation.ClearAppointments()
	return vu
}

// RemoveAppointmentIDs removes the appointments edge to Appointment by ids.
func (vu *VeterinarianUpdate) RemoveAppointmentIDs(ids ...uuid.UUID) *VeterinarianUpdate {
	vu.mutation.RemoveAppointmentIDs(ids...)
	return vu
}

// RemoveAppointments removes appointments edges to Appointment.
func (vu *VeterinarianUpdate) RemoveAppointments(a ...*Appointment) *VeterinarianUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vu.RemoveAppointmentIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (vu *VeterinarianUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	vu.defaults()
	if len(vu.hooks) == 0 {
		if err = vu.check(); err != nil {
			return 0, err
		}
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VeterinarianMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vu.check(); err != nil {
				return 0, err
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VeterinarianUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VeterinarianUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VeterinarianUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VeterinarianUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := veterinarian.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VeterinarianUpdate) check() error {
	if v, ok := vu.mutation.Phone(); ok {
		if err := veterinarian.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if _, ok := vu.mutation.UserID(); vu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	if _, ok := vu.mutation.ClinicID(); vu.mutation.ClinicCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"clinic\"")
	}
	return nil
}

func (vu *VeterinarianUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   veterinarian.Table,
			Columns: veterinarian.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: veterinarian.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: veterinarian.FieldCreatedAt,
		})
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: veterinarian.FieldUpdatedAt,
		})
	}
	if value, ok := vu.mutation.RemovedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: veterinarian.FieldRemovedAt,
		})
	}
	if vu.mutation.RemovedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: veterinarian.FieldRemovedAt,
		})
	}
	if value, ok := vu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarian.FieldPhone,
		})
	}
	if vu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   veterinarian.UserTable,
			Columns: []string{veterinarian.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   veterinarian.UserTable,
			Columns: []string{veterinarian.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   veterinarian.ClinicTable,
			Columns: []string{veterinarian.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: clinic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   veterinarian.ClinicTable,
			Columns: []string{veterinarian.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: clinic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   veterinarian.AppointmentsTable,
			Columns: []string{veterinarian.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appointment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedAppointmentsIDs(); len(nodes) > 0 && !vu.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   veterinarian.AppointmentsTable,
			Columns: []string{veterinarian.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.AppointmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   veterinarian.AppointmentsTable,
			Columns: []string{veterinarian.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{veterinarian.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// VeterinarianUpdateOne is the builder for updating a single Veterinarian entity.
type VeterinarianUpdateOne struct {
	config
	hooks    []Hook
	mutation *VeterinarianMutation
}

// SetCreatedAt sets the created_at field.
func (vuo *VeterinarianUpdateOne) SetCreatedAt(t time.Time) *VeterinarianUpdateOne {
	vuo.mutation.SetCreatedAt(t)
	return vuo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (vuo *VeterinarianUpdateOne) SetNillableCreatedAt(t *time.Time) *VeterinarianUpdateOne {
	if t != nil {
		vuo.SetCreatedAt(*t)
	}
	return vuo
}

// SetUpdatedAt sets the updated_at field.
func (vuo *VeterinarianUpdateOne) SetUpdatedAt(t time.Time) *VeterinarianUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetRemovedAt sets the removed_at field.
func (vuo *VeterinarianUpdateOne) SetRemovedAt(t time.Time) *VeterinarianUpdateOne {
	vuo.mutation.SetRemovedAt(t)
	return vuo
}

// SetNillableRemovedAt sets the removed_at field if the given value is not nil.
func (vuo *VeterinarianUpdateOne) SetNillableRemovedAt(t *time.Time) *VeterinarianUpdateOne {
	if t != nil {
		vuo.SetRemovedAt(*t)
	}
	return vuo
}

// ClearRemovedAt clears the value of removed_at.
func (vuo *VeterinarianUpdateOne) ClearRemovedAt() *VeterinarianUpdateOne {
	vuo.mutation.ClearRemovedAt()
	return vuo
}

// SetPhone sets the phone field.
func (vuo *VeterinarianUpdateOne) SetPhone(s string) *VeterinarianUpdateOne {
	vuo.mutation.SetPhone(s)
	return vuo
}

// SetUserID sets the user edge to User by id.
func (vuo *VeterinarianUpdateOne) SetUserID(id uuid.UUID) *VeterinarianUpdateOne {
	vuo.mutation.SetUserID(id)
	return vuo
}

// SetUser sets the user edge to User.
func (vuo *VeterinarianUpdateOne) SetUser(u *User) *VeterinarianUpdateOne {
	return vuo.SetUserID(u.ID)
}

// SetClinicID sets the clinic edge to Clinic by id.
func (vuo *VeterinarianUpdateOne) SetClinicID(id uuid.UUID) *VeterinarianUpdateOne {
	vuo.mutation.SetClinicID(id)
	return vuo
}

// SetClinic sets the clinic edge to Clinic.
func (vuo *VeterinarianUpdateOne) SetClinic(c *Clinic) *VeterinarianUpdateOne {
	return vuo.SetClinicID(c.ID)
}

// AddAppointmentIDs adds the appointments edge to Appointment by ids.
func (vuo *VeterinarianUpdateOne) AddAppointmentIDs(ids ...uuid.UUID) *VeterinarianUpdateOne {
	vuo.mutation.AddAppointmentIDs(ids...)
	return vuo
}

// AddAppointments adds the appointments edges to Appointment.
func (vuo *VeterinarianUpdateOne) AddAppointments(a ...*Appointment) *VeterinarianUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vuo.AddAppointmentIDs(ids...)
}

// Mutation returns the VeterinarianMutation object of the builder.
func (vuo *VeterinarianUpdateOne) Mutation() *VeterinarianMutation {
	return vuo.mutation
}

// ClearUser clears the "user" edge to type User.
func (vuo *VeterinarianUpdateOne) ClearUser() *VeterinarianUpdateOne {
	vuo.mutation.ClearUser()
	return vuo
}

// ClearClinic clears the "clinic" edge to type Clinic.
func (vuo *VeterinarianUpdateOne) ClearClinic() *VeterinarianUpdateOne {
	vuo.mutation.ClearClinic()
	return vuo
}

// ClearAppointments clears all "appointments" edges to type Appointment.
func (vuo *VeterinarianUpdateOne) ClearAppointments() *VeterinarianUpdateOne {
	vuo.mutation.ClearAppointments()
	return vuo
}

// RemoveAppointmentIDs removes the appointments edge to Appointment by ids.
func (vuo *VeterinarianUpdateOne) RemoveAppointmentIDs(ids ...uuid.UUID) *VeterinarianUpdateOne {
	vuo.mutation.RemoveAppointmentIDs(ids...)
	return vuo
}

// RemoveAppointments removes appointments edges to Appointment.
func (vuo *VeterinarianUpdateOne) RemoveAppointments(a ...*Appointment) *VeterinarianUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return vuo.RemoveAppointmentIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (vuo *VeterinarianUpdateOne) Save(ctx context.Context) (*Veterinarian, error) {
	var (
		err  error
		node *Veterinarian
	)
	vuo.defaults()
	if len(vuo.hooks) == 0 {
		if err = vuo.check(); err != nil {
			return nil, err
		}
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VeterinarianMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vuo.check(); err != nil {
				return nil, err
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VeterinarianUpdateOne) SaveX(ctx context.Context) *Veterinarian {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VeterinarianUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VeterinarianUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VeterinarianUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := veterinarian.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VeterinarianUpdateOne) check() error {
	if v, ok := vuo.mutation.Phone(); ok {
		if err := veterinarian.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if _, ok := vuo.mutation.UserID(); vuo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	if _, ok := vuo.mutation.ClinicID(); vuo.mutation.ClinicCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"clinic\"")
	}
	return nil
}

func (vuo *VeterinarianUpdateOne) sqlSave(ctx context.Context) (_node *Veterinarian, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   veterinarian.Table,
			Columns: veterinarian.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: veterinarian.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Veterinarian.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := vuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: veterinarian.FieldCreatedAt,
		})
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: veterinarian.FieldUpdatedAt,
		})
	}
	if value, ok := vuo.mutation.RemovedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: veterinarian.FieldRemovedAt,
		})
	}
	if vuo.mutation.RemovedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: veterinarian.FieldRemovedAt,
		})
	}
	if value, ok := vuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: veterinarian.FieldPhone,
		})
	}
	if vuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   veterinarian.UserTable,
			Columns: []string{veterinarian.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   veterinarian.UserTable,
			Columns: []string{veterinarian.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.ClinicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   veterinarian.ClinicTable,
			Columns: []string{veterinarian.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: clinic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ClinicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   veterinarian.ClinicTable,
			Columns: []string{veterinarian.ClinicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: clinic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   veterinarian.AppointmentsTable,
			Columns: []string{veterinarian.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appointment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedAppointmentsIDs(); len(nodes) > 0 && !vuo.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   veterinarian.AppointmentsTable,
			Columns: []string{veterinarian.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.AppointmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   veterinarian.AppointmentsTable,
			Columns: []string{veterinarian.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Veterinarian{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{veterinarian.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
