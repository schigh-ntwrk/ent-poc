// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/schigh-ntwrk/ent-poc/internal/ent/clinic"
	"github.com/schigh-ntwrk/ent-poc/internal/ent/user"
	"github.com/schigh-ntwrk/ent-poc/internal/ent/veterinarian"
)

// Veterinarian is the model entity for the Veterinarian schema.
type Veterinarian struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// RemovedAt holds the value of the "removed_at" field.
	RemovedAt *time.Time `json:"removed_at,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VeterinarianQuery when eager-loading is set.
	Edges     VeterinarianEdges `json:"edges"`
	clinic_id *uuid.UUID
	user_id   *uuid.UUID
}

// VeterinarianEdges holds the relations/edges for other nodes in the graph.
type VeterinarianEdges struct {
	// User holds the value of the user edge.
	User *User
	// Clinic holds the value of the clinic edge.
	Clinic *Clinic
	// Appointments holds the value of the appointments edge.
	Appointments []*Appointment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VeterinarianEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ClinicOrErr returns the Clinic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VeterinarianEdges) ClinicOrErr() (*Clinic, error) {
	if e.loadedTypes[1] {
		if e.Clinic == nil {
			// The edge clinic was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: clinic.Label}
		}
		return e.Clinic, nil
	}
	return nil, &NotLoadedError{edge: "clinic"}
}

// AppointmentsOrErr returns the Appointments value or an error if the edge
// was not loaded in eager-loading.
func (e VeterinarianEdges) AppointmentsOrErr() ([]*Appointment, error) {
	if e.loadedTypes[2] {
		return e.Appointments, nil
	}
	return nil, &NotLoadedError{edge: "appointments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Veterinarian) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullTime{},   // removed_at
		&sql.NullString{}, // phone
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Veterinarian) fkValues() []interface{} {
	return []interface{}{
		&uuid.UUID{}, // clinic_id
		&uuid.UUID{}, // user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Veterinarian fields.
func (v *Veterinarian) assignValues(values ...interface{}) error {
	if m, n := len(values), len(veterinarian.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		v.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		v.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		v.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field removed_at", values[2])
	} else if value.Valid {
		v.RemovedAt = new(time.Time)
		*v.RemovedAt = value.Time
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field phone", values[3])
	} else if value.Valid {
		v.Phone = value.String
	}
	values = values[4:]
	if len(values) == len(veterinarian.ForeignKeys) {
		if value, ok := values[0].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field clinic_id", values[0])
		} else if value != nil {
			v.clinic_id = value
		}
		if value, ok := values[1].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field user_id", values[1])
		} else if value != nil {
			v.user_id = value
		}
	}
	return nil
}

// QueryUser queries the user edge of the Veterinarian.
func (v *Veterinarian) QueryUser() *UserQuery {
	return (&VeterinarianClient{config: v.config}).QueryUser(v)
}

// QueryClinic queries the clinic edge of the Veterinarian.
func (v *Veterinarian) QueryClinic() *ClinicQuery {
	return (&VeterinarianClient{config: v.config}).QueryClinic(v)
}

// QueryAppointments queries the appointments edge of the Veterinarian.
func (v *Veterinarian) QueryAppointments() *AppointmentQuery {
	return (&VeterinarianClient{config: v.config}).QueryAppointments(v)
}

// Update returns a builder for updating this Veterinarian.
// Note that, you need to call Veterinarian.Unwrap() before calling this method, if this Veterinarian
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Veterinarian) Update() *VeterinarianUpdateOne {
	return (&VeterinarianClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (v *Veterinarian) Unwrap() *Veterinarian {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Veterinarian is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Veterinarian) String() string {
	var builder strings.Builder
	builder.WriteString("Veterinarian(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	if v := v.RemovedAt; v != nil {
		builder.WriteString(", removed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", phone=")
	builder.WriteString(v.Phone)
	builder.WriteByte(')')
	return builder.String()
}

// Veterinarians is a parsable slice of Veterinarian.
type Veterinarians []*Veterinarian

func (v Veterinarians) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
