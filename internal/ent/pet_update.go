// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
	"github.com/schigh-ntwrk/entc-poc/internal/ent/appointment"
	"github.com/schigh-ntwrk/entc-poc/internal/ent/customer"
	"github.com/schigh-ntwrk/entc-poc/internal/ent/pet"
	"github.com/schigh-ntwrk/entc-poc/internal/ent/predicate"
)

// PetUpdate is the builder for updating Pet entities.
type PetUpdate struct {
	config
	hooks    []Hook
	mutation *PetMutation
}

// Where adds a new predicate for the builder.
func (pu *PetUpdate) Where(ps ...predicate.Pet) *PetUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetCreatedAt sets the created_at field.
func (pu *PetUpdate) SetCreatedAt(t time.Time) *PetUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (pu *PetUpdate) SetNillableCreatedAt(t *time.Time) *PetUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the updated_at field.
func (pu *PetUpdate) SetUpdatedAt(t time.Time) *PetUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetRemovedAt sets the removed_at field.
func (pu *PetUpdate) SetRemovedAt(t time.Time) *PetUpdate {
	pu.mutation.SetRemovedAt(t)
	return pu
}

// SetNillableRemovedAt sets the removed_at field if the given value is not nil.
func (pu *PetUpdate) SetNillableRemovedAt(t *time.Time) *PetUpdate {
	if t != nil {
		pu.SetRemovedAt(*t)
	}
	return pu
}

// ClearRemovedAt clears the value of removed_at.
func (pu *PetUpdate) ClearRemovedAt() *PetUpdate {
	pu.mutation.ClearRemovedAt()
	return pu
}

// SetName sets the name field.
func (pu *PetUpdate) SetName(s string) *PetUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetSpecies sets the species field.
func (pu *PetUpdate) SetSpecies(pe pet.Species) *PetUpdate {
	pu.mutation.SetSpecies(pe)
	return pu
}

// SetBirthDate sets the birth_date field.
func (pu *PetUpdate) SetBirthDate(t time.Time) *PetUpdate {
	pu.mutation.SetBirthDate(t)
	return pu
}

// SetNillableBirthDate sets the birth_date field if the given value is not nil.
func (pu *PetUpdate) SetNillableBirthDate(t *time.Time) *PetUpdate {
	if t != nil {
		pu.SetBirthDate(*t)
	}
	return pu
}

// ClearBirthDate clears the value of birth_date.
func (pu *PetUpdate) ClearBirthDate() *PetUpdate {
	pu.mutation.ClearBirthDate()
	return pu
}

// SetDetails sets the details field.
func (pu *PetUpdate) SetDetails(s string) *PetUpdate {
	pu.mutation.SetDetails(s)
	return pu
}

// SetNillableDetails sets the details field if the given value is not nil.
func (pu *PetUpdate) SetNillableDetails(s *string) *PetUpdate {
	if s != nil {
		pu.SetDetails(*s)
	}
	return pu
}

// ClearDetails clears the value of details.
func (pu *PetUpdate) ClearDetails() *PetUpdate {
	pu.mutation.ClearDetails()
	return pu
}

// SetOwnerID sets the owner edge to Customer by id.
func (pu *PetUpdate) SetOwnerID(id uuid.UUID) *PetUpdate {
	pu.mutation.SetOwnerID(id)
	return pu
}

// SetNillableOwnerID sets the owner edge to Customer by id if the given value is not nil.
func (pu *PetUpdate) SetNillableOwnerID(id *uuid.UUID) *PetUpdate {
	if id != nil {
		pu = pu.SetOwnerID(*id)
	}
	return pu
}

// SetOwner sets the owner edge to Customer.
func (pu *PetUpdate) SetOwner(c *Customer) *PetUpdate {
	return pu.SetOwnerID(c.ID)
}

// AddAppointmentIDs adds the appointments edge to Appointment by ids.
func (pu *PetUpdate) AddAppointmentIDs(ids ...uuid.UUID) *PetUpdate {
	pu.mutation.AddAppointmentIDs(ids...)
	return pu
}

// AddAppointments adds the appointments edges to Appointment.
func (pu *PetUpdate) AddAppointments(a ...*Appointment) *PetUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAppointmentIDs(ids...)
}

// Mutation returns the PetMutation object of the builder.
func (pu *PetUpdate) Mutation() *PetMutation {
	return pu.mutation
}

// ClearOwner clears the "owner" edge to type Customer.
func (pu *PetUpdate) ClearOwner() *PetUpdate {
	pu.mutation.ClearOwner()
	return pu
}

// ClearAppointments clears all "appointments" edges to type Appointment.
func (pu *PetUpdate) ClearAppointments() *PetUpdate {
	pu.mutation.ClearAppointments()
	return pu
}

// RemoveAppointmentIDs removes the appointments edge to Appointment by ids.
func (pu *PetUpdate) RemoveAppointmentIDs(ids ...uuid.UUID) *PetUpdate {
	pu.mutation.RemoveAppointmentIDs(ids...)
	return pu
}

// RemoveAppointments removes appointments edges to Appointment.
func (pu *PetUpdate) RemoveAppointments(a ...*Appointment) *PetUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAppointmentIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PetUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PetUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PetUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PetUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PetUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := pet.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PetUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := pet.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Species(); ok {
		if err := pet.SpeciesValidator(v); err != nil {
			return &ValidationError{Name: "species", err: fmt.Errorf("ent: validator failed for field \"species\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Details(); ok {
		if err := pet.DetailsValidator(v); err != nil {
			return &ValidationError{Name: "details", err: fmt.Errorf("ent: validator failed for field \"details\": %w", err)}
		}
	}
	return nil
}

func (pu *PetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pet.Table,
			Columns: pet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pet.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pet.FieldCreatedAt,
		})
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pet.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.RemovedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pet.FieldRemovedAt,
		})
	}
	if pu.mutation.RemovedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pet.FieldRemovedAt,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pet.FieldName,
		})
	}
	if value, ok := pu.mutation.Species(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: pet.FieldSpecies,
		})
	}
	if value, ok := pu.mutation.BirthDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pet.FieldBirthDate,
		})
	}
	if pu.mutation.BirthDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pet.FieldBirthDate,
		})
	}
	if value, ok := pu.mutation.Details(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pet.FieldDetails,
		})
	}
	if pu.mutation.DetailsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pet.FieldDetails,
		})
	}
	if pu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pet.OwnerTable,
			Columns: []string{pet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pet.OwnerTable,
			Columns: []string{pet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.AppointmentsTable,
			Columns: []string{pet.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appointment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAppointmentsIDs(); len(nodes) > 0 && !pu.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.AppointmentsTable,
			Columns: []string{pet.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AppointmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.AppointmentsTable,
			Columns: []string{pet.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pet.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PetUpdateOne is the builder for updating a single Pet entity.
type PetUpdateOne struct {
	config
	hooks    []Hook
	mutation *PetMutation
}

// SetCreatedAt sets the created_at field.
func (puo *PetUpdateOne) SetCreatedAt(t time.Time) *PetUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableCreatedAt(t *time.Time) *PetUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the updated_at field.
func (puo *PetUpdateOne) SetUpdatedAt(t time.Time) *PetUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetRemovedAt sets the removed_at field.
func (puo *PetUpdateOne) SetRemovedAt(t time.Time) *PetUpdateOne {
	puo.mutation.SetRemovedAt(t)
	return puo
}

// SetNillableRemovedAt sets the removed_at field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableRemovedAt(t *time.Time) *PetUpdateOne {
	if t != nil {
		puo.SetRemovedAt(*t)
	}
	return puo
}

// ClearRemovedAt clears the value of removed_at.
func (puo *PetUpdateOne) ClearRemovedAt() *PetUpdateOne {
	puo.mutation.ClearRemovedAt()
	return puo
}

// SetName sets the name field.
func (puo *PetUpdateOne) SetName(s string) *PetUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetSpecies sets the species field.
func (puo *PetUpdateOne) SetSpecies(pe pet.Species) *PetUpdateOne {
	puo.mutation.SetSpecies(pe)
	return puo
}

// SetBirthDate sets the birth_date field.
func (puo *PetUpdateOne) SetBirthDate(t time.Time) *PetUpdateOne {
	puo.mutation.SetBirthDate(t)
	return puo
}

// SetNillableBirthDate sets the birth_date field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableBirthDate(t *time.Time) *PetUpdateOne {
	if t != nil {
		puo.SetBirthDate(*t)
	}
	return puo
}

// ClearBirthDate clears the value of birth_date.
func (puo *PetUpdateOne) ClearBirthDate() *PetUpdateOne {
	puo.mutation.ClearBirthDate()
	return puo
}

// SetDetails sets the details field.
func (puo *PetUpdateOne) SetDetails(s string) *PetUpdateOne {
	puo.mutation.SetDetails(s)
	return puo
}

// SetNillableDetails sets the details field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableDetails(s *string) *PetUpdateOne {
	if s != nil {
		puo.SetDetails(*s)
	}
	return puo
}

// ClearDetails clears the value of details.
func (puo *PetUpdateOne) ClearDetails() *PetUpdateOne {
	puo.mutation.ClearDetails()
	return puo
}

// SetOwnerID sets the owner edge to Customer by id.
func (puo *PetUpdateOne) SetOwnerID(id uuid.UUID) *PetUpdateOne {
	puo.mutation.SetOwnerID(id)
	return puo
}

// SetNillableOwnerID sets the owner edge to Customer by id if the given value is not nil.
func (puo *PetUpdateOne) SetNillableOwnerID(id *uuid.UUID) *PetUpdateOne {
	if id != nil {
		puo = puo.SetOwnerID(*id)
	}
	return puo
}

// SetOwner sets the owner edge to Customer.
func (puo *PetUpdateOne) SetOwner(c *Customer) *PetUpdateOne {
	return puo.SetOwnerID(c.ID)
}

// AddAppointmentIDs adds the appointments edge to Appointment by ids.
func (puo *PetUpdateOne) AddAppointmentIDs(ids ...uuid.UUID) *PetUpdateOne {
	puo.mutation.AddAppointmentIDs(ids...)
	return puo
}

// AddAppointments adds the appointments edges to Appointment.
func (puo *PetUpdateOne) AddAppointments(a ...*Appointment) *PetUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAppointmentIDs(ids...)
}

// Mutation returns the PetMutation object of the builder.
func (puo *PetUpdateOne) Mutation() *PetMutation {
	return puo.mutation
}

// ClearOwner clears the "owner" edge to type Customer.
func (puo *PetUpdateOne) ClearOwner() *PetUpdateOne {
	puo.mutation.ClearOwner()
	return puo
}

// ClearAppointments clears all "appointments" edges to type Appointment.
func (puo *PetUpdateOne) ClearAppointments() *PetUpdateOne {
	puo.mutation.ClearAppointments()
	return puo
}

// RemoveAppointmentIDs removes the appointments edge to Appointment by ids.
func (puo *PetUpdateOne) RemoveAppointmentIDs(ids ...uuid.UUID) *PetUpdateOne {
	puo.mutation.RemoveAppointmentIDs(ids...)
	return puo
}

// RemoveAppointments removes appointments edges to Appointment.
func (puo *PetUpdateOne) RemoveAppointments(a ...*Appointment) *PetUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAppointmentIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *PetUpdateOne) Save(ctx context.Context) (*Pet, error) {
	var (
		err  error
		node *Pet
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PetUpdateOne) SaveX(ctx context.Context) *Pet {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PetUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PetUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PetUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := pet.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PetUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := pet.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Species(); ok {
		if err := pet.SpeciesValidator(v); err != nil {
			return &ValidationError{Name: "species", err: fmt.Errorf("ent: validator failed for field \"species\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Details(); ok {
		if err := pet.DetailsValidator(v); err != nil {
			return &ValidationError{Name: "details", err: fmt.Errorf("ent: validator failed for field \"details\": %w", err)}
		}
	}
	return nil
}

func (puo *PetUpdateOne) sqlSave(ctx context.Context) (_node *Pet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pet.Table,
			Columns: pet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pet.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Pet.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pet.FieldCreatedAt,
		})
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pet.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.RemovedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pet.FieldRemovedAt,
		})
	}
	if puo.mutation.RemovedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pet.FieldRemovedAt,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pet.FieldName,
		})
	}
	if value, ok := puo.mutation.Species(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: pet.FieldSpecies,
		})
	}
	if value, ok := puo.mutation.BirthDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pet.FieldBirthDate,
		})
	}
	if puo.mutation.BirthDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pet.FieldBirthDate,
		})
	}
	if value, ok := puo.mutation.Details(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pet.FieldDetails,
		})
	}
	if puo.mutation.DetailsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pet.FieldDetails,
		})
	}
	if puo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pet.OwnerTable,
			Columns: []string{pet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pet.OwnerTable,
			Columns: []string{pet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.AppointmentsTable,
			Columns: []string{pet.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appointment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAppointmentsIDs(); len(nodes) > 0 && !puo.mutation.AppointmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.AppointmentsTable,
			Columns: []string{pet.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AppointmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pet.AppointmentsTable,
			Columns: []string{pet.AppointmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pet{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pet.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
