// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/schigh-ntwrk/ent-poc/internal/ent/clinic"
)

// Clinic is the model entity for the Clinic schema.
type Clinic struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// RemovedAt holds the value of the "removed_at" field.
	RemovedAt *time.Time `json:"removed_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// WebURL holds the value of the "web_url" field.
	WebURL string `json:"web_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClinicQuery when eager-loading is set.
	Edges ClinicEdges `json:"edges"`
}

// ClinicEdges holds the relations/edges for other nodes in the graph.
type ClinicEdges struct {
	// Veterinarians holds the value of the veterinarians edge.
	Veterinarians []*Veterinarian
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VeterinariansOrErr returns the Veterinarians value or an error if the edge
// was not loaded in eager-loading.
func (e ClinicEdges) VeterinariansOrErr() ([]*Veterinarian, error) {
	if e.loadedTypes[0] {
		return e.Veterinarians, nil
	}
	return nil, &NotLoadedError{edge: "veterinarians"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Clinic) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullTime{},   // removed_at
		&sql.NullString{}, // name
		&sql.NullString{}, // address
		&sql.NullString{}, // phone
		&sql.NullString{}, // web_url
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Clinic fields.
func (c *Clinic) assignValues(values ...interface{}) error {
	if m, n := len(values), len(clinic.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		c.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		c.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		c.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field removed_at", values[2])
	} else if value.Valid {
		c.RemovedAt = new(time.Time)
		*c.RemovedAt = value.Time
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[3])
	} else if value.Valid {
		c.Name = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field address", values[4])
	} else if value.Valid {
		c.Address = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field phone", values[5])
	} else if value.Valid {
		c.Phone = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field web_url", values[6])
	} else if value.Valid {
		c.WebURL = value.String
	}
	return nil
}

// QueryVeterinarians queries the veterinarians edge of the Clinic.
func (c *Clinic) QueryVeterinarians() *VeterinarianQuery {
	return (&ClinicClient{config: c.config}).QueryVeterinarians(c)
}

// Update returns a builder for updating this Clinic.
// Note that, you need to call Clinic.Unwrap() before calling this method, if this Clinic
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Clinic) Update() *ClinicUpdateOne {
	return (&ClinicClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Clinic) Unwrap() *Clinic {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Clinic is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Clinic) String() string {
	var builder strings.Builder
	builder.WriteString("Clinic(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	if v := c.RemovedAt; v != nil {
		builder.WriteString(", removed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", address=")
	builder.WriteString(c.Address)
	builder.WriteString(", phone=")
	builder.WriteString(c.Phone)
	builder.WriteString(", web_url=")
	builder.WriteString(c.WebURL)
	builder.WriteByte(')')
	return builder.String()
}

// Clinics is a parsable slice of Clinic.
type Clinics []*Clinic

func (c Clinics) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
