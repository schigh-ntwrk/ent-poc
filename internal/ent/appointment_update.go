// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
	"github.com/schigh-ntwrk/entc-poc/internal/ent/appointment"
	"github.com/schigh-ntwrk/entc-poc/internal/ent/pet"
	"github.com/schigh-ntwrk/entc-poc/internal/ent/predicate"
	"github.com/schigh-ntwrk/entc-poc/internal/ent/veterinarian"
)

// AppointmentUpdate is the builder for updating Appointment entities.
type AppointmentUpdate struct {
	config
	hooks    []Hook
	mutation *AppointmentMutation
}

// Where adds a new predicate for the builder.
func (au *AppointmentUpdate) Where(ps ...predicate.Appointment) *AppointmentUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetCreatedAt sets the created_at field.
func (au *AppointmentUpdate) SetCreatedAt(t time.Time) *AppointmentUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableCreatedAt(t *time.Time) *AppointmentUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUpdatedAt sets the updated_at field.
func (au *AppointmentUpdate) SetUpdatedAt(t time.Time) *AppointmentUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetRemovedAt sets the removed_at field.
func (au *AppointmentUpdate) SetRemovedAt(t time.Time) *AppointmentUpdate {
	au.mutation.SetRemovedAt(t)
	return au
}

// SetNillableRemovedAt sets the removed_at field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableRemovedAt(t *time.Time) *AppointmentUpdate {
	if t != nil {
		au.SetRemovedAt(*t)
	}
	return au
}

// ClearRemovedAt clears the value of removed_at.
func (au *AppointmentUpdate) ClearRemovedAt() *AppointmentUpdate {
	au.mutation.ClearRemovedAt()
	return au
}

// SetStartAt sets the start_at field.
func (au *AppointmentUpdate) SetStartAt(t time.Time) *AppointmentUpdate {
	au.mutation.SetStartAt(t)
	return au
}

// SetEndAt sets the end_at field.
func (au *AppointmentUpdate) SetEndAt(t time.Time) *AppointmentUpdate {
	au.mutation.SetEndAt(t)
	return au
}

// SetPaidAt sets the paid_at field.
func (au *AppointmentUpdate) SetPaidAt(t time.Time) *AppointmentUpdate {
	au.mutation.SetPaidAt(t)
	return au
}

// SetCharge sets the charge field.
func (au *AppointmentUpdate) SetCharge(f float64) *AppointmentUpdate {
	au.mutation.ResetCharge()
	au.mutation.SetCharge(f)
	return au
}

// SetNillableCharge sets the charge field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableCharge(f *float64) *AppointmentUpdate {
	if f != nil {
		au.SetCharge(*f)
	}
	return au
}

// AddCharge adds f to charge.
func (au *AppointmentUpdate) AddCharge(f float64) *AppointmentUpdate {
	au.mutation.AddCharge(f)
	return au
}

// SetPaid sets the paid field.
func (au *AppointmentUpdate) SetPaid(b bool) *AppointmentUpdate {
	au.mutation.SetPaid(b)
	return au
}

// SetNillablePaid sets the paid field if the given value is not nil.
func (au *AppointmentUpdate) SetNillablePaid(b *bool) *AppointmentUpdate {
	if b != nil {
		au.SetPaid(*b)
	}
	return au
}

// SetPetsID sets the pets edge to Pet by id.
func (au *AppointmentUpdate) SetPetsID(id uuid.UUID) *AppointmentUpdate {
	au.mutation.SetPetsID(id)
	return au
}

// SetPets sets the pets edge to Pet.
func (au *AppointmentUpdate) SetPets(p *Pet) *AppointmentUpdate {
	return au.SetPetsID(p.ID)
}

// SetVeterinariansID sets the veterinarians edge to Veterinarian by id.
func (au *AppointmentUpdate) SetVeterinariansID(id uuid.UUID) *AppointmentUpdate {
	au.mutation.SetVeterinariansID(id)
	return au
}

// SetVeterinarians sets the veterinarians edge to Veterinarian.
func (au *AppointmentUpdate) SetVeterinarians(v *Veterinarian) *AppointmentUpdate {
	return au.SetVeterinariansID(v.ID)
}

// Mutation returns the AppointmentMutation object of the builder.
func (au *AppointmentUpdate) Mutation() *AppointmentMutation {
	return au.mutation
}

// ClearPets clears the "pets" edge to type Pet.
func (au *AppointmentUpdate) ClearPets() *AppointmentUpdate {
	au.mutation.ClearPets()
	return au
}

// ClearVeterinarians clears the "veterinarians" edge to type Veterinarian.
func (au *AppointmentUpdate) ClearVeterinarians() *AppointmentUpdate {
	au.mutation.ClearVeterinarians()
	return au
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *AppointmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppointmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppointmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppointmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppointmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AppointmentUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := appointment.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AppointmentUpdate) check() error {
	if _, ok := au.mutation.PetsID(); au.mutation.PetsCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"pets\"")
	}
	if _, ok := au.mutation.VeterinariansID(); au.mutation.VeterinariansCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"veterinarians\"")
	}
	return nil
}

func (au *AppointmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appointment.Table,
			Columns: appointment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appointment.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.RemovedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldRemovedAt,
		})
	}
	if au.mutation.RemovedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: appointment.FieldRemovedAt,
		})
	}
	if value, ok := au.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldStartAt,
		})
	}
	if value, ok := au.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldEndAt,
		})
	}
	if value, ok := au.mutation.PaidAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldPaidAt,
		})
	}
	if value, ok := au.mutation.Charge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appointment.FieldCharge,
		})
	}
	if value, ok := au.mutation.AddedCharge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appointment.FieldCharge,
		})
	}
	if value, ok := au.mutation.Paid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appointment.FieldPaid,
		})
	}
	if au.mutation.PetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.PetsTable,
			Columns: []string{appointment.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.PetsTable,
			Columns: []string{appointment.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.VeterinariansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.VeterinariansTable,
			Columns: []string{appointment.VeterinariansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: veterinarian.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.VeterinariansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.VeterinariansTable,
			Columns: []string{appointment.VeterinariansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: veterinarian.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AppointmentUpdateOne is the builder for updating a single Appointment entity.
type AppointmentUpdateOne struct {
	config
	hooks    []Hook
	mutation *AppointmentMutation
}

// SetCreatedAt sets the created_at field.
func (auo *AppointmentUpdateOne) SetCreatedAt(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableCreatedAt(t *time.Time) *AppointmentUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUpdatedAt sets the updated_at field.
func (auo *AppointmentUpdateOne) SetUpdatedAt(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetRemovedAt sets the removed_at field.
func (auo *AppointmentUpdateOne) SetRemovedAt(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetRemovedAt(t)
	return auo
}

// SetNillableRemovedAt sets the removed_at field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableRemovedAt(t *time.Time) *AppointmentUpdateOne {
	if t != nil {
		auo.SetRemovedAt(*t)
	}
	return auo
}

// ClearRemovedAt clears the value of removed_at.
func (auo *AppointmentUpdateOne) ClearRemovedAt() *AppointmentUpdateOne {
	auo.mutation.ClearRemovedAt()
	return auo
}

// SetStartAt sets the start_at field.
func (auo *AppointmentUpdateOne) SetStartAt(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetStartAt(t)
	return auo
}

// SetEndAt sets the end_at field.
func (auo *AppointmentUpdateOne) SetEndAt(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetEndAt(t)
	return auo
}

// SetPaidAt sets the paid_at field.
func (auo *AppointmentUpdateOne) SetPaidAt(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetPaidAt(t)
	return auo
}

// SetCharge sets the charge field.
func (auo *AppointmentUpdateOne) SetCharge(f float64) *AppointmentUpdateOne {
	auo.mutation.ResetCharge()
	auo.mutation.SetCharge(f)
	return auo
}

// SetNillableCharge sets the charge field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableCharge(f *float64) *AppointmentUpdateOne {
	if f != nil {
		auo.SetCharge(*f)
	}
	return auo
}

// AddCharge adds f to charge.
func (auo *AppointmentUpdateOne) AddCharge(f float64) *AppointmentUpdateOne {
	auo.mutation.AddCharge(f)
	return auo
}

// SetPaid sets the paid field.
func (auo *AppointmentUpdateOne) SetPaid(b bool) *AppointmentUpdateOne {
	auo.mutation.SetPaid(b)
	return auo
}

// SetNillablePaid sets the paid field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillablePaid(b *bool) *AppointmentUpdateOne {
	if b != nil {
		auo.SetPaid(*b)
	}
	return auo
}

// SetPetsID sets the pets edge to Pet by id.
func (auo *AppointmentUpdateOne) SetPetsID(id uuid.UUID) *AppointmentUpdateOne {
	auo.mutation.SetPetsID(id)
	return auo
}

// SetPets sets the pets edge to Pet.
func (auo *AppointmentUpdateOne) SetPets(p *Pet) *AppointmentUpdateOne {
	return auo.SetPetsID(p.ID)
}

// SetVeterinariansID sets the veterinarians edge to Veterinarian by id.
func (auo *AppointmentUpdateOne) SetVeterinariansID(id uuid.UUID) *AppointmentUpdateOne {
	auo.mutation.SetVeterinariansID(id)
	return auo
}

// SetVeterinarians sets the veterinarians edge to Veterinarian.
func (auo *AppointmentUpdateOne) SetVeterinarians(v *Veterinarian) *AppointmentUpdateOne {
	return auo.SetVeterinariansID(v.ID)
}

// Mutation returns the AppointmentMutation object of the builder.
func (auo *AppointmentUpdateOne) Mutation() *AppointmentMutation {
	return auo.mutation
}

// ClearPets clears the "pets" edge to type Pet.
func (auo *AppointmentUpdateOne) ClearPets() *AppointmentUpdateOne {
	auo.mutation.ClearPets()
	return auo
}

// ClearVeterinarians clears the "veterinarians" edge to type Veterinarian.
func (auo *AppointmentUpdateOne) ClearVeterinarians() *AppointmentUpdateOne {
	auo.mutation.ClearVeterinarians()
	return auo
}

// Save executes the query and returns the updated entity.
func (auo *AppointmentUpdateOne) Save(ctx context.Context) (*Appointment, error) {
	var (
		err  error
		node *Appointment
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppointmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppointmentUpdateOne) SaveX(ctx context.Context) *Appointment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppointmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppointmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AppointmentUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := appointment.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AppointmentUpdateOne) check() error {
	if _, ok := auo.mutation.PetsID(); auo.mutation.PetsCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"pets\"")
	}
	if _, ok := auo.mutation.VeterinariansID(); auo.mutation.VeterinariansCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"veterinarians\"")
	}
	return nil
}

func (auo *AppointmentUpdateOne) sqlSave(ctx context.Context) (_node *Appointment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appointment.Table,
			Columns: appointment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appointment.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Appointment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.RemovedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldRemovedAt,
		})
	}
	if auo.mutation.RemovedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: appointment.FieldRemovedAt,
		})
	}
	if value, ok := auo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldStartAt,
		})
	}
	if value, ok := auo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldEndAt,
		})
	}
	if value, ok := auo.mutation.PaidAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldPaidAt,
		})
	}
	if value, ok := auo.mutation.Charge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appointment.FieldCharge,
		})
	}
	if value, ok := auo.mutation.AddedCharge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appointment.FieldCharge,
		})
	}
	if value, ok := auo.mutation.Paid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appointment.FieldPaid,
		})
	}
	if auo.mutation.PetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.PetsTable,
			Columns: []string{appointment.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.PetsTable,
			Columns: []string{appointment.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.VeterinariansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.VeterinariansTable,
			Columns: []string{appointment.VeterinariansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: veterinarian.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.VeterinariansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.VeterinariansTable,
			Columns: []string{appointment.VeterinariansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: veterinarian.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Appointment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
