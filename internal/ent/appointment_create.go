// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
	"github.com/schigh-ntwrk/ent-poc/internal/ent/appointment"
	"github.com/schigh-ntwrk/ent-poc/internal/ent/pet"
	"github.com/schigh-ntwrk/ent-poc/internal/ent/veterinarian"
)

// AppointmentCreate is the builder for creating a Appointment entity.
type AppointmentCreate struct {
	config
	mutation *AppointmentMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (ac *AppointmentCreate) SetCreatedAt(t time.Time) *AppointmentCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableCreatedAt(t *time.Time) *AppointmentCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the updated_at field.
func (ac *AppointmentCreate) SetUpdatedAt(t time.Time) *AppointmentCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableUpdatedAt(t *time.Time) *AppointmentCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetRemovedAt sets the removed_at field.
func (ac *AppointmentCreate) SetRemovedAt(t time.Time) *AppointmentCreate {
	ac.mutation.SetRemovedAt(t)
	return ac
}

// SetNillableRemovedAt sets the removed_at field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableRemovedAt(t *time.Time) *AppointmentCreate {
	if t != nil {
		ac.SetRemovedAt(*t)
	}
	return ac
}

// SetStartAt sets the start_at field.
func (ac *AppointmentCreate) SetStartAt(t time.Time) *AppointmentCreate {
	ac.mutation.SetStartAt(t)
	return ac
}

// SetEndAt sets the end_at field.
func (ac *AppointmentCreate) SetEndAt(t time.Time) *AppointmentCreate {
	ac.mutation.SetEndAt(t)
	return ac
}

// SetPaidAt sets the paid_at field.
func (ac *AppointmentCreate) SetPaidAt(t time.Time) *AppointmentCreate {
	ac.mutation.SetPaidAt(t)
	return ac
}

// SetCharge sets the charge field.
func (ac *AppointmentCreate) SetCharge(f float64) *AppointmentCreate {
	ac.mutation.SetCharge(f)
	return ac
}

// SetNillableCharge sets the charge field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableCharge(f *float64) *AppointmentCreate {
	if f != nil {
		ac.SetCharge(*f)
	}
	return ac
}

// SetPaid sets the paid field.
func (ac *AppointmentCreate) SetPaid(b bool) *AppointmentCreate {
	ac.mutation.SetPaid(b)
	return ac
}

// SetNillablePaid sets the paid field if the given value is not nil.
func (ac *AppointmentCreate) SetNillablePaid(b *bool) *AppointmentCreate {
	if b != nil {
		ac.SetPaid(*b)
	}
	return ac
}

// SetID sets the id field.
func (ac *AppointmentCreate) SetID(u uuid.UUID) *AppointmentCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetPetsID sets the pets edge to Pet by id.
func (ac *AppointmentCreate) SetPetsID(id uuid.UUID) *AppointmentCreate {
	ac.mutation.SetPetsID(id)
	return ac
}

// SetPets sets the pets edge to Pet.
func (ac *AppointmentCreate) SetPets(p *Pet) *AppointmentCreate {
	return ac.SetPetsID(p.ID)
}

// SetVeterinariansID sets the veterinarians edge to Veterinarian by id.
func (ac *AppointmentCreate) SetVeterinariansID(id uuid.UUID) *AppointmentCreate {
	ac.mutation.SetVeterinariansID(id)
	return ac
}

// SetVeterinarians sets the veterinarians edge to Veterinarian.
func (ac *AppointmentCreate) SetVeterinarians(v *Veterinarian) *AppointmentCreate {
	return ac.SetVeterinariansID(v.ID)
}

// Mutation returns the AppointmentMutation object of the builder.
func (ac *AppointmentCreate) Mutation() *AppointmentMutation {
	return ac.mutation
}

// Save creates the Appointment in the database.
func (ac *AppointmentCreate) Save(ctx context.Context) (*Appointment, error) {
	var (
		err  error
		node *Appointment
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppointmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AppointmentCreate) SaveX(ctx context.Context) *Appointment {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ac *AppointmentCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := appointment.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := appointment.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Charge(); !ok {
		v := appointment.DefaultCharge
		ac.mutation.SetCharge(v)
	}
	if _, ok := ac.mutation.Paid(); !ok {
		v := appointment.DefaultPaid
		ac.mutation.SetPaid(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := appointment.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AppointmentCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := ac.mutation.StartAt(); !ok {
		return &ValidationError{Name: "start_at", err: errors.New("ent: missing required field \"start_at\"")}
	}
	if _, ok := ac.mutation.EndAt(); !ok {
		return &ValidationError{Name: "end_at", err: errors.New("ent: missing required field \"end_at\"")}
	}
	if _, ok := ac.mutation.PaidAt(); !ok {
		return &ValidationError{Name: "paid_at", err: errors.New("ent: missing required field \"paid_at\"")}
	}
	if _, ok := ac.mutation.Charge(); !ok {
		return &ValidationError{Name: "charge", err: errors.New("ent: missing required field \"charge\"")}
	}
	if _, ok := ac.mutation.Paid(); !ok {
		return &ValidationError{Name: "paid", err: errors.New("ent: missing required field \"paid\"")}
	}
	if _, ok := ac.mutation.PetsID(); !ok {
		return &ValidationError{Name: "pets", err: errors.New("ent: missing required edge \"pets\"")}
	}
	if _, ok := ac.mutation.VeterinariansID(); !ok {
		return &ValidationError{Name: "veterinarians", err: errors.New("ent: missing required edge \"veterinarians\"")}
	}
	return nil
}

func (ac *AppointmentCreate) sqlSave(ctx context.Context) (*Appointment, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (ac *AppointmentCreate) createSpec() (*Appointment, *sqlgraph.CreateSpec) {
	var (
		_node = &Appointment{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appointment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appointment.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.RemovedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldRemovedAt,
		})
		_node.RemovedAt = &value
	}
	if value, ok := ac.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := ac.mutation.EndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldEndAt,
		})
		_node.EndAt = value
	}
	if value, ok := ac.mutation.PaidAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldPaidAt,
		})
		_node.PaidAt = value
	}
	if value, ok := ac.mutation.Charge(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appointment.FieldCharge,
		})
		_node.Charge = value
	}
	if value, ok := ac.mutation.Paid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appointment.FieldPaid,
		})
		_node.Paid = value
	}
	if nodes := ac.mutation.PetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.PetsTable,
			Columns: []string{appointment.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.VeterinariansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.VeterinariansTable,
			Columns: []string{appointment.VeterinariansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: veterinarian.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AppointmentCreateBulk is the builder for creating a bulk of Appointment entities.
type AppointmentCreateBulk struct {
	config
	builders []*AppointmentCreate
}

// Save creates the Appointment entities in the database.
func (acb *AppointmentCreateBulk) Save(ctx context.Context) ([]*Appointment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Appointment, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppointmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (acb *AppointmentCreateBulk) SaveX(ctx context.Context) []*Appointment {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
